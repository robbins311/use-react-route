{"ast":null,"code":"var _jsxFileName = \"/Users/robbins312/Downloads/16-adv-route-proj/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => {\n        /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n// componenets 가 로딩되기전에 (데이터 받아올떄) 컴포넌트의 일부분만 먼저 렌더링 하는것(defer)\n\nasync function loadEvents() {\n  // useState 같은 훅은 사용 X, 기본 내장 브라우저 기능(localstorage 등)는 사용가능\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // Error 페이지를 통해 핸들링...\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    // return { isError: true, message: \"Could not fetch events\" };\n    return json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    //어떤것이든 return 할수있음\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    //사용할 http요청 모두 넣어줘야함.. trigger하는게 아니라 excute // promise가 없으면 defer를 쓸 이유가 없음 ㅋㅋ\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/robbins312/Downloads/16-adv-route-proj/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\n\nfunction EventsPage() {\n  const { events } = useLoaderData();\n\n  return (\n    <Suspense>\n      <Await resolve={events}>\n        {(loadedEvents) => {\n          <EventsList events={loadedEvents}></EventsList>;\n        }}\n      </Await>\n    </Suspense>\n  );\n}\n\nexport default EventsPage;\n\n// componenets 가 로딩되기전에 (데이터 받아올떄) 컴포넌트의 일부분만 먼저 렌더링 하는것(defer)\n\nasync function loadEvents() {\n  // useState 같은 훅은 사용 X, 기본 내장 브라우저 기능(localstorage 등)는 사용가능\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    // Error 페이지를 통해 핸들링...\n    // throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    // return { isError: true, message: \"Could not fetch events\" };\n    return json({ message: \"Could not fetch events.\" }, { status: 500 });\n  } else {\n    //어떤것이든 return 할수있음\n    return response;\n  }\n}\n\nexport function loader() {\n  return defer({\n    //사용할 http요청 모두 넣어줘야함.. trigger하는게 아니라 excute // promise가 없으면 defer를 쓸 이유가 없음 ㅋㅋ\n    events: loadEvents(),\n  });\n}\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,CAAC,CAAC;EAElC,oBACEI,OAAA,CAACF,QAAQ;IAAAM,QAAA,eACPJ,OAAA,CAACP,KAAK;MAACY,OAAO,EAAEF,MAAO;MAAAC,QAAA,EACnBE,YAAY,IAAK;QACjB,aAAAN,OAAA,CAACH,UAAU;UAACM,MAAM,EAAEG;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC;MACjD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACR,EAAA,CAZQD,UAAU;EAAA,QACEL,aAAa;AAAA;AAAAe,EAAA,GADzBV,UAAU;AAcnB,eAAeA,UAAU;;AAEzB;;AAEA,eAAeW,UAAUA,CAAA,EAAG;EAC1B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,OAAOpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL;IACA,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOxB,KAAK,CAAC;IACX;IACAS,MAAM,EAAES,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}