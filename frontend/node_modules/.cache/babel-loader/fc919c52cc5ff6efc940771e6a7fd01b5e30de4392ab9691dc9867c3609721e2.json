{"ast":null,"code":"var _jsxFileName = \"/Users/robbins312/Downloads/16-adv-route-proj/frontend/src/App.js\";\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport RootLayout from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/Events\";\nimport EventsDetailPage, { loader as EventsDetailLoader, action as deleteEventAction } from \"./pages/EventsDetail\";\nimport NewEventsPage from \"./pages/NewEvent\";\nimport EditEventsPage from \"./pages/EditEvent\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\nimport ErrorPage from \"./pages/Error\";\nimport { action as manipulateEventAction } from \"./components/EventForm\";\nimport NewsletterPage, { action as newsletterAction } from \"./pages/Newsletter\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this),\n    errorElement: /*#__PURE__*/_jsxDEV(ErrorPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"events\",\n      element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }, this),\n      children: [{\n        //사용하는 컴포넌트에서 loader 작성 후 여기서 사용\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 24\n        }, this),\n        //상위 컴포넌트에서는 loader의 데이터를 받아올수없음\n        loader: eventsLoader\n      }, {\n        path: \":eventsID\",\n        //loader는 중첩된 라우트 기능에도 사용가능 이러면 children에서 모두 사용가능 ㅋㅋ\n        loader: EventsDetailLoader,\n        // 그런데 부모의 loader를 쓰려면 id 추가, userouteloaderdata를 써야함\n        id: \"event-detail\",\n        children: [{\n          index: true,\n          element: /*#__PURE__*/_jsxDEV(EventsDetailPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 28\n          }, this),\n          action: deleteEventAction\n        }, {\n          path: \"edit\",\n          element: /*#__PURE__*/_jsxDEV(EditEventsPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 28\n          }, this),\n          // form 이 제출된 방법에 따라 하나의 액션을 여러개의 컴포넌트에서 씀\n          action: manipulateEventAction\n        }]\n      }, {\n        path: \"new\",\n        element: /*#__PURE__*/_jsxDEV(NewEventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 24\n        }, this),\n        // form 이 제출된 방법에 따라 하나의 액션을 여러개의 컴포넌트에서 씀\n        action: manipulateEventAction\n      }]\n    }, {\n      path: \"newsletter\",\n      element: /*#__PURE__*/_jsxDEV(NewsletterPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 20\n      }, this),\n      action: newsletterAction\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","RootLayout","HomePage","EventsPage","loader","eventsLoader","EventsDetailPage","EventsDetailLoader","action","deleteEventAction","NewEventsPage","EditEventsPage","EventsRootLayout","ErrorPage","manipulateEventAction","NewsletterPage","newsletterAction","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","id","_c","$RefreshReg$"],"sources":["/Users/robbins312/Downloads/16-adv-route-proj/frontend/src/App.js"],"sourcesContent":["import { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport RootLayout from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/Events\";\nimport EventsDetailPage, {\n  loader as EventsDetailLoader,\n  action as deleteEventAction,\n} from \"./pages/EventsDetail\";\nimport NewEventsPage from \"./pages/NewEvent\";\nimport EditEventsPage from \"./pages/EditEvent\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\nimport ErrorPage from \"./pages/Error\";\nimport { action as manipulateEventAction } from \"./components/EventForm\";\nimport NewsletterPage, { action as newsletterAction } from \"./pages/Newsletter\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <RootLayout />,\n      errorElement: <ErrorPage />,\n      children: [\n        {\n          index: true,\n          element: <HomePage />,\n        },\n        {\n          path: \"events\",\n          element: <EventsRootLayout />,\n          children: [\n            {\n              //사용하는 컴포넌트에서 loader 작성 후 여기서 사용\n              index: true,\n              element: <EventsPage />,\n              //상위 컴포넌트에서는 loader의 데이터를 받아올수없음\n              loader: eventsLoader,\n            },\n            {\n              path: \":eventsID\",\n              //loader는 중첩된 라우트 기능에도 사용가능 이러면 children에서 모두 사용가능 ㅋㅋ\n              loader: EventsDetailLoader,\n              // 그런데 부모의 loader를 쓰려면 id 추가, userouteloaderdata를 써야함\n              id: \"event-detail\",\n              children: [\n                {\n                  index: true,\n                  element: <EventsDetailPage />,\n                  action: deleteEventAction,\n                },\n                {\n                  path: \"edit\",\n                  element: <EditEventsPage />,\n                  // form 이 제출된 방법에 따라 하나의 액션을 여러개의 컴포넌트에서 씀\n                  action: manipulateEventAction,\n                },\n              ],\n            },\n\n            {\n              path: \"new\",\n              element: <NewEventsPage />,\n              // form 이 제출된 방법에 따라 하나의 액션을 여러개의 컴포넌트에서 씀\n              action: manipulateEventAction,\n            },\n          ],\n        },\n        {\n          path: \"newsletter\",\n          element: <NewsletterPage />,\n          action: newsletterAction,\n        },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}