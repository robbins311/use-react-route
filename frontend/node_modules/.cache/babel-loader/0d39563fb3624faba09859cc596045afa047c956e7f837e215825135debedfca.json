{"ast":null,"code":"var _jsxFileName = \"/Users/robbins312/Downloads/16-adv-route-proj/frontend/src/App.js\";\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport RootLayout from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage from \"./pages/Events\";\nimport EventsDetailPage from \"./pages/EventsDetail\";\nimport NewEventsPage from \"./pages/NewEvent\";\nimport EditEventsPage from \"./pages/EditEvent\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 20\n      }, this)\n    }, {\n      path: \"events\",\n      element: /*#__PURE__*/_jsxDEV(EventsRootLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 20\n      }, this),\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this),\n        //상위 컴포넌트에서는 loader의 데이터를 받아올수없음\n        loader: async () => {\n          const response = await fetch(\"http://localhost:8080/events\");\n          if (!response.ok) {\n            // ...\n          } else {\n            const resData = await response.json();\n            return resData.events;\n          }\n        }\n      }, {\n        path: \":eventsID\",\n        element: /*#__PURE__*/_jsxDEV(EventsDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 24\n        }, this)\n      }, {\n        path: \"new\",\n        element: /*#__PURE__*/_jsxDEV(NewEventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 24\n        }, this)\n      }, {\n        path: \":eventsID/edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 24\n        }, this)\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["RouterProvider","createBrowserRouter","RootLayout","HomePage","EventsPage","EventsDetailPage","NewEventsPage","EditEventsPage","EventsRootLayout","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","resData","json","events","_c","$RefreshReg$"],"sources":["/Users/robbins312/Downloads/16-adv-route-proj/frontend/src/App.js"],"sourcesContent":["import { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport RootLayout from \"./pages/Root\";\nimport HomePage from \"./pages/Home\";\nimport EventsPage from \"./pages/Events\";\nimport EventsDetailPage from \"./pages/EventsDetail\";\nimport NewEventsPage from \"./pages/NewEvent\";\nimport EditEventsPage from \"./pages/EditEvent\";\nimport EventsRootLayout from \"./pages/EventsRoot\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <RootLayout />,\n      children: [\n        {\n          index: true,\n          element: <HomePage />,\n        },\n        {\n          path: \"events\",\n          element: <EventsRootLayout />,\n          children: [\n            {\n              index: true,\n              element: <EventsPage />,\n              //상위 컴포넌트에서는 loader의 데이터를 받아올수없음\n              loader: async () => {\n                const response = await fetch(\"http://localhost:8080/events\");\n\n                if (!response.ok) {\n                  // ...\n                } else {\n                  const resData = await response.json();\n                  return resData.events;\n                }\n              },\n            },\n            {\n              path: \":eventsID\",\n              element: <EventsDetailPage />,\n            },\n            {\n              path: \"new\",\n              element: <NewEventsPage />,\n            },\n            {\n              path: \":eventsID/edit\",\n              element: <EditEventsPage />,\n            },\n          ],\n        },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,cAAc;AACnC,OAAOC,UAAU,MAAM,gBAAgB;AACvC,OAAOC,gBAAgB,MAAM,sBAAsB;AACnD,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,cAAc,MAAM,mBAAmB;AAC9C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGX,mBAAmB,CAAC,CACjC;IACEY,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEJ,OAAA,CAACR,UAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACvBC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXN,OAAO,eAAEJ,OAAA,CAACP,QAAQ;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IACtB,CAAC,EACD;MACEL,IAAI,EAAE,QAAQ;MACdC,OAAO,eAAEJ,OAAA,CAACF,gBAAgB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAC7BC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,IAAI;QACXN,OAAO,eAAEJ,OAAA,CAACN,UAAU;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;QACvB;QACAG,MAAM,EAAE,MAAAA,CAAA,KAAY;UAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;UAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;YAChB;UAAA,CACD,MAAM;YACL,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;YACrC,OAAOD,OAAO,CAACE,MAAM;UACvB;QACF;MACF,CAAC,EACD;QACEd,IAAI,EAAE,WAAW;QACjBC,OAAO,eAAEJ,OAAA,CAACL,gBAAgB;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC9B,CAAC,EACD;QACEL,IAAI,EAAE,KAAK;QACXC,OAAO,eAAEJ,OAAA,CAACJ,aAAa;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC3B,CAAC,EACD;QACEL,IAAI,EAAE,gBAAgB;QACtBC,OAAO,eAAEJ,OAAA,CAACH,cAAc;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC5B,CAAC;IAEL,CAAC;EAEL,CAAC,CACF,CAAC;EACF,oBAAOR,OAAA,CAACV,cAAc;IAACY,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACU,EAAA,GA/CQjB,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}